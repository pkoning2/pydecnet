PyDECnet uses a configuration file to describe the DECnet node it
implements.  This file is somewhat analogous to the DECnet
configuration database described in the DNA Network Management
architecture specification.

The configuration file is a text file; each line in the file is
formatted somewhat like a Unix shell command line.  Comment lines have
a "#" in column 1; these and blank lines are ignored.

Lines beginning with "@" are include file references.  The file name
follows the @ sign.  That file is read at this point and processed as
if its text were included in the top level config file.  Includes may
be nested to any level that does not overflow the Python stack.

At startup, PyDECnet reads the config file(s) named in the command
line, and any includes mentioned.  After the config file has been
fully parsed, execution begins provided no errors were found during
config file reading.  Each top level config file defines either a
DECnet node (instance of "routing"), an Ethernet bridge, or the HTTP
access feature.  So each config file must contain either a "routing",
a "bridge", or an "http" component -- one but not more than one of
these. 

Each config file line resembles a Unix command invocation, with
GNU-style flexible order:

     component --switch swarg --switch cmdarg cmdarg2
     component --switch cmdarg cmdarg2 swarg --switch

for example:

    circuit eth-1 Ethernet en1 --cost 3

The components roughly correspond to those listed in the DECnet
architecture specifications, and many of the switch names are taken
from the names of configuration variables in those specifications.

The supported components, switches, and arguments are described in
detail below.  Switches are always optional.  Command arguments may be
required or optional, as described below.

Component "http"

This optional component enables HTTP and/or HTTPS access for
monitoring, and if specified, for the JSON based API.  It has several
optional switches.  If there is no "http" component in any config
file, HTTP(S) is disabled.

--http-port: an integer in the range 0..65535, the TCP port number for
the HTTP listener.  Default is 8000.  The value 0 disables HTTP.

--https-port: an integer in the range 0..65535, the TCP port number
for the HTTP listener.  Default is 8443.  The value 0 disables HTTPS.

--certificate: the file name of an X.509 certificate file (.pem file)
containing the SSL server certificate to be used for HTTPS.  Default
is "decnet.pem".

--api: enables the JSON API.  If omitted, JSON requests (to the "api"
URL) are rejected.  JSON is available only via HTTPS, so --https-port
must not be zero.

TODO: define authorization mechanisms.

Component "routing"

This component is required for a DECnet node.  It describes the DNA
Routing layer.  Many of the parameters correspond to those mentioned
in the DNA Routing specification, generally by the same name.  Please
refer to that specification for a full description.  Note that some
DNA Routing layer parameters are not used by PyDECnet; for example,
some are used to implement size limitations on tables where PyDECnet
has no need to limit those tables.

Argument: node ID.  The "routing" entry requires the node address of
this node as argument.  The node address has the usual form, either an
integer, or a dotted pair.

--type: Routing layer type, one of "l2router", "l1router", "endnode",
"phase3router", "phase3endnode", "phase2".  Default is "l2router".

--maxhops: Maximum number of hops on the path to a node within the
area before that node is considered unreachable.  Argument is an
integer in the range 1..30, default is 16.

--maxcost: Maximum path cost to a node within the area before that
node is considered unreachable.  Argument is an integer in the range
1..1022, default is 128.

--amaxhops: Maximum number of hops on the path to an area before that
area is considered unreachable.  Argument is an integer in the range
1..30, default is 16.

--amaxcost: Maximum path cost to an area before that area is
considered unreachable.  Argument is an integer in the range 1..1022,
default is 128.

--maxvisits: Maximum number of hops a packet may visit before it is
considered undeliverable.  Argument is an integer in the range 1..63,
default is 32.

--maxnodes:  Maximum node number in the area.  Argument is an integer
in the range 1..1023, default is 1023.  

--maxarea: Maximum area number.  Argument is an integer in the range
1..63, default is 63.

--t1: Background routing message transmission interval, in seconds,
for point to point circuits.  Argument is an integer, default is 600
(i.e., 10 minutes).

--bct1: Background routing message transmission interval, in seconds,
for LAN circuits.  Argument is an integer, default is 10.

Component "node":

This config line defines an entry in the node database, i.e., a
mapping between node ID and node name.  These are all optional (it is
valid to have no names defined).

Arguments: id name.  Node ID is a node address either as an integer or
a dotted pair.  Name is the node name, which must conform to DECnet
node name rules (1 to 6 characters, alphanumeric, at least one
letter).  The name may be supplied in either case but is converted to
upper case.

--inbound-verification: Verification value required from this node, if
it is the neighbor on a point to point circuit which has --verify
specified to require inbound verification.

--outbound-verification: Verification value to send to this node, if
it is the neighbor on a point to point circuit and requests
verification.  The value is a string.  If this argument is omitted and
the node requests verification, a null string is sent (which may or
may not be accepted by the remote node).

Component "circuit":

This config line defines a circuit.  End nodes must have exactly one
circuit (since DNA requires this for Phase III or Phase IV end
nodes).  Routers and Phase II nodes must have at least one circuit.
There is no specific upper bound on the number of circuits (PyDECnet
will support any number until you run out of Python memory or
execution becomes too slow).

Argument: name.  This is the name by which the circuit is referenced
internally.  It has no particular significance but must be unique; it
is converted to upper case.  There is a DECnet convention that circuit
names consist of a device name, hyphen, and unit number, for example
ETH-0.  

Argument: Circuit type.  One of "DDCMP", "Ethernet", "SimhDMC",
"Multinet", "GRE".  Default is Ethernet.  Ethernet and GRE are "LAN"
type circuits; DDCMP, SimhDMC and Multinet are point to point type
circuits.  Note that Multinet does not work well (defective protocol
design, there's nothing the implementation can do about that) and is
not recommended.  SimhDMC implements the payload-only original DMC-11
emulation that existed in some prerelease versions of SimH V3.9.  It
is still part of PyDECnet but is deprecated.

Argument: Device name or connection data.  The meaning of this string
depends on the circuit type:

    Ethernet: subtype:dest where subtype indicates a particular method
    for speaking Ethernet, and dest is the device or destination to be
    used.  Acceptable values are:
        tap:devname -- TUN/TAP accessing the named TAP device
	pcap:ifname -- Use the specified Ethernet interface via the
	    PCAP library
        bridge:localport:host:port -- Attach this Ethernet to the 
            Bilquist bridge at the specified IP address and UDP port,
            sending from and receiving on the specific localport.
	    For those used to SIMH notation, "udp" is a synonym for 
	    "bridge".  

    SimhDMC: either host:port or host:port:secondary.  The first form
    defines a primary mode DMC-11 emulation connection: the host and
    port are the TCP endpoint address for the remote end.  The second
    form defines a secondary mode connection: the port number is the
    TCP port on which to listen for connections, and the host is the
    remote endpoint from which the connection must come.  Refer to the
    SIMH user manual for more details on DMC-11 emulation.  (Note that
    the way the addresses are specified is different and somewhat
    simplere here than it is in the SIMH configuration file.)

    Multinet: this can use UDP or TCP.  For UDP, the device argument
    is host or host:port.  In the first form, the port number is 700
    (the default); in the second, the port number is the specified
    value.  For TCP, the device argument is host::mode or
    host:port:mode, with the port number interpreted as above, and
    mode is either "listen" to expect an incoming TCP connection, or
    "connect" to initiate an outgoing connection.  One of the two
    sides must be configured to connect, the other to listen.
    Note: as stated above, Multinet is not recommended because of its
    design defects.  In addition, Multinet over UDP is much more
    strongly discouraged; the design errors made by the Multinet
    "designers" are far more obvious when you attempt to run it over
    UDP. 

    GRE: host.  This specifies GRE encapsulation to the specified
    host.  The IP protocol type is always 47 (the assigned value for
    the GRE protocol).

    DDCMP: mode:lport:host:rport.  lport is the local port number,
    host specifies the remote host address, and rport is the remote
    port number.  mode is udp, tcp, or telnet.  For udp, communication
    is by UDP datagrams between the local port and the specified host
    and remote port.  Otherwise, communication is by a TCP
    connection.  Unlike the other datalink types, DDCMP will listen on
    the specified local port while also attempting to connect to the
    designated host and remote port.  This matches what is done in the
    DMC emulation in SimH V4.0.  Telnet mode is used when the remote
    host is a telnet server connected to a DDCMP interface; in this
    mode, correct Telnet character escape processing is done.  In
    regular TCP mode, the connection is treated as a transparent raw
    connection.  (For use with SimH, "tcp" mode should be used.)
    [ Note: Telnet mode is not yet implemented ]

--cost: Circuit cost.  Argument is an integer in the range 1..25,
default is 1.  

--t1: Background routing message interval override.  Argument is an
integer.  Default is the routing setting of t1 or bct1, depending on
what type of circuit this is.  In DNA, the background routing message
interval is an executor parameter (it depends on circuit type but not
on the specific circuit).  In PyDECnet, it may sometimes make sense to
set a different value for a specific circuit.  For example, the
routing parameter t1 defaults to 600 (10 minutes) which is a sensible
default for conforming point to point circuits, but Multinet should
use a much lower value.

--t3: Hello interval.  Argument is an integer, specifying a time in
seconds.  Default is 10 for LAN circuits, 60 for point to point
circuits.

--random-address: This switch applies only to circuits of type
Ethernet.  If omitted, PyDECnet obtains the circuit's MAC address from
the host.  If supplied, a random 46 bit value prefixed by 01 (for
"individual address" and "locally administered") is used.  This
address appears in MOP Sysid messages as the "hardware address".

--nr: Number of adjacenct routers.  Argument is an integer in the
range 1 to 33.  This value specifies how many other routers may be
present on this Ehternet.  Note that the DNA spec says this is a
number in the range 1..255, but this is wrong: the list of adjacent
routers appears in the Router Hello message, and the size limit of
that field in the message implies a limit of 33 routers.  

--priority: Designated router priority.  Argument is an integer in the
range 0 to 127, default is 64.

--verify: if supplied, verification is required during circuit
initialization.  This is applicable only for point to point circuits.
The remote node must supply a verification value that matches the
--inbound-verification switch value for that node in the node list.
If it doesn't match, or if no inbound verification value is defined
for the remote node, initialization is rejected.

--mop: applies only to bridge circuits.  By default, only DECnet
packets are accepted from and sent to this circuit.  If --mop is
supplied, MOP, LAT, and loopback protocol packets are also accepted.
This corresponds to the [lat] section in the bridge.conf file for the
original bridge.c program.

Component "nsp"

This component defines the NSP (also called ECL) layer of DNA.

--max-connections: Specifies the total number of connections that may
terminate at this node.  Allowed values are 255, 511, 1023, 2047,
4095, 8191, 16383, 32767.  For an explanation why, see the Phase II
specification, specifically the section discussing "intercept"
operation. 

Component "bridge"

This component is required for a Bilquist bridge node.  Its only
argument is the name of the bridge.

A bridge has one or more circuits, which must be Ethernet.  A "system"
component may be specified to define an HTTP port for monitoring; no
other components are applicable.  It will provide simple bridge
services among all those circuits, flooding multicast and unknown
address packets, and directly forwarding packets whose destination
address is known.  It is compatible with the C based bridge
implementation by Johnny Bilquist.
