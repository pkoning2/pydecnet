PyDECnet is an implementation of the Digital Network Architecture
(commonly called "DECnet") implemented as a pure Python module.  It
requires Python 3.3 or later.

Standards compliance

PyDECnet implements the Phase IV architecture, the last version
actually published by Digital.  Note that it was the intent of the DNA
architecture team for all versions to be published, this was actually
never done for the several updates to Phase IV that were designed, nor
for the Phase IV ("DECnet/OSI") specifications.

PyDECnet was implemented from the published specifications, as a pure
Python module.  It implements DECnet routing, both level 1 and level 2
(area) routing.  It also implements other aspects of DNA, specifically
the MOP (Maintenance Operations) protocols.

Supported datalinks

Supported datalinks include Ethernet, the DMC-11 emulation implemented
in SIMH V3.9, "Multinet" encapsulation of point to point datalink
messages over UDP or TCP, and GRE encapsulation of Ethernet packets.

Note that Multinet encapsulation over UDP is not recommended because
it violates the DNA specification badly enough that it is extremely
unreliable except in the most ideal circumstances.  Multinet over TCP
and SIMH DMC mode, on the other hand, comply with the specification,
work well, and are suitable for connecting PyDECnet nodes with other
DNA implementations via the Internet.  GRE is also architecturally
sound, but because it emulates an Ethernet it should only be used on
low loss connections.

Major components

PyDECnet contains the following major components:

- DNA layers:
  - Datalink
  - MOP
  - Routing
  - NSP
  - Session Control
  - Network Management
  - Applications
    - File transfer
    - NML
    - Mirror
- API for MOP and Session Control, using JSON over HTTPS
- HTTP(S) based monitoring interface

(Note that NSP and the layers above are not yet implemented)

The API allows external processes to access protocol services in
PyDECnet, via JSON carried over HTTPS (the same HTTPS port also used
for monitoring).  Several sample API clients are provided in the
"samples" directory.  A library to use this API to implement a socket
style interface is planned.

Multiple node support

In typical use, a PyDECnet invocation starts a single DNA node.  For
testing, multiple systems (bridges or nodes) may be started by a
single invocation.  The main advantage of doing so is that there is a
single logging stream, so the entire sequence of events in the test
configuration will show up, in correct order, in that log.  If this is
done, the home page in the monitoring HTTP service will list the
systems, and the pages for each system will have a URL argument of the
form "?system=<name>" appended, for example "/routing?system=NI1D".

usage: pydecnet [-h] [-d] [--pid-file FN] [-L FN] [-e LV] [-S] [--syslog S]
                [--log-config LC] [-k KEEP] [-V] [-H [CMD]]
                [CFN [CFN ...]]

positional arguments:
  CFN                   Configuration file

optional arguments:
  -h, --help            show this help message and exit
  -d, --daemon          Run as daemon. Requires a log file name to be
                        specified.
  --pid-file FN         PID file (default: /var/run/pydecnet.pid)
  -L FN, --log-file FN  Log file (default: log to stderr)
  -e LV, --log-level LV
                        Log level (default: INFO)
  -S                    Log to local syslog
  --syslog S            Log to syslog at the indicated address, "local" means
                        the appropriate local UDP or named socket
  --log-config LC       Logging configuration file
  -k KEEP, --keep KEEP  Number of log files to keep with nightly rotation.
                        Requires a log file name to be specified.
  -V, --version         show program's version number and exit
  -H [CMD], --config-help [CMD]
                        Show configuration file help (for CMD if given)

At least one configuration file argument must be supplied.  Each
configuration file corresponds to a PyDECnet node to be run, so a
typical invocation will have a single configuration file.  Refer to
the documentation in "config.txt" for a full explanation of the format
of a configuration file.

By default, PyDECnet runs in the foreground.  If --daemon is supplied,
it runs as a daemon.  In that case, a log file name must be supplied
because stderr is no longer open.

Logging uses the standard Python "logging" module.  By default
messages of level INFO and higher are logged to the console (stderr).
Command line switches are available to specify a different log
destination and/or different message levels.

For detailed control of logging, including options such as logging via
log handlers not available through the command line, or logging to
several destinations possibly with different message levels for each,
the --log-config argument is used to specify a log config file.  The
information in this file is documented in the Python library manual:
https://docs.python.org/3/library/logging.config.html#logging-config-dictschema

The file can be a YAML format file, if the PyYAML module is installed
and the file name extension is .yaml, or a JSON format file
otherwise.  Samples of both are provided in the samples subdirectory.
The sample files all configure the "root" logger.  The actual log
calls made in pydecnet use a child logger named "decnet".  By default
that is simply a passthrough logger that delegates everything to the
root logger, so configuring what is wanted to be logged in the root
logger is sufficient.  For complex cases it might be useful to set
specific configurations on the logger named "decnet".  An example
would be if pydecnet were treated as a library, a component of a
larger application where other parts also make logging calls.

DNA events can be logged via the logging module as well, with logging
level INFO and text formatted as documented in the DNA Network
Management specification.  This feature is off by default, but can be
controlled by the "logging" configuration line in the individual
configuration files (see config.txt for details).

The -H switch can be used to get usage information for each type of
entry defined for the configuration files.
